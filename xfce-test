#!/usr/bin/env bash

DOWNLOAD_DATE=${DOWNLOAD_DATE:-$(date +%Y%m%d)}
RUN_AS=


install_me() {
    if grep "^ID=arch" /etc/*-release >/dev/null 2>&1; then
        INSTALL_TARGET=/usr/local/bin/xfce-test
        echo "I might need the sudo password for installation..."
        RUN_AS="sudo"
    else
        INSTALL_TARGET=~/.local/bin/xfce-test
        mkdir -p ~/.local/bin
    fi
    # bash autocomplete
    BASH_COMPLETION="#begin-xfce-test
_xfce-test_completions()
{
  COMPREPLY=(\$(compgen -W \"${MODES[*]}\" \"\${COMP_WORDS[1]}\"))
}

complete -F _xfce-test_completions xfce-test
#end-xfce-test
"
    if [ ! -f ~/.bash_completion ]; then
        echo "$BASH_COMPLETION" >> ~/.bash_completion
    else
        if grep "#begin-xfce-test" ~/.bash_completion > /dev/null; then
            sed -i "/#begin-xfce-test/,/#end-xfce-test/d" ~/.bash_completion
        fi
        echo "$BASH_COMPLETION" >> ~/.bash_completion
    fi

    # "fall back"
    $RUN_AS cp $0 ${INSTALL_TARGET}

    echo "Trying to get the latest version"
    $RUN_AS curl -o ${INSTALL_TARGET} https://raw.githubusercontent.com/schuellerf/xfce-test/master/xfce-test || echo "... well I tried to."
    $RUN_AS chmod u+x ${INSTALL_TARGET}

    echo "Installed 'xfce-test' to $(readlink -f ${INSTALL_TARGET})"
    echo "You can just call it with 'xfce-test'"
}

usage() {
    echo "Usage:"
    echo "  $0 [command]"
    echo ""
    echo "  Without a command, interactive mode is started"
    echo ""
    echo "  command:"
    echo "      start          Start the container for testing"
    echo "                     USE THIS IF YOU ARE NOT SURE"
    echo "      list           List all docker-tags available online (on hub.docker.com)"
    echo "      list_local     List all docker-tags available locally (already built or pulled)"
    echo "      pull [tag]     Get the latest (or the given) container-tag"
    echo "      no-session     starts the container without a session"
    echo "                     (this is great if you want to test the session itself ;)"
    echo "      install        Installed the script to ~/.local/bin for"
    echo "                     easier execution"
    echo "      call [...]     Call the given commands in the container (without Xephyr)"
    echo "                     can be used to compile the local folder but in the context of the container"
    echo ""
    echo "  -- Commands doing some automatic stuff"
    echo "      screenshots    Creating just a screenshot of each 'main' xfce app"
    echo "      behave         Run all behave tests"
    echo "      behavevideo    Run all behave tests while recording them"
    echo "      fulltestvideo  Create a demo video - this is the one done by travis"
    echo ""
    echo "  -- Commands only working from within the cloned git repository"
    echo "      build          Builds the container locally"
    echo "                     Environment variable:"
    echo "                     DOWNLOAD_DATE defines if all source code should be"
    echo "                                 newly cloned and rebuilt"
    echo "                     default: ${DOWNLOAD_DATE}"
    echo "  Environment variables:"
    echo "     (useful environment variables you might want to set)"
    echo "      XFSM_VERBOSE   set to \"1\" to get a log file in ~/.xfce4-session.verbose-log"
    echo "                     default: \"${XFSM_VERBOSE}\""
    echo "      LANG           choose language for the session"
    echo "                     default: \"${LANG}\""

}

MANUAL_MODES=("start" "no-session" "list" "list_local")
AUTOMATIC_MODES=("screenshots" "behave" "behavevideo" "fulltestvideo")

REPO_MODES=("build")
WORK_MODES=(${MANUAL_MODES[*]} ${AUTOMATIC_MODES[*]})
if git status > /dev/null 2>&1; then
    WORK_MODES+=(${REPO_MODES[*]})
fi

MODES=("install" "call" "pull" ${WORK_MODES[*]})

# quit on errors
set +e

# TBD replace by nicer check
if [ -f /etc/lsb-release ] && grep Ubuntu /etc/lsb-release >/dev/null; then
  UBUNTU_PACKAGES="xserver-xephyr docker.io xvfb ffmpeg jq curl"

  for package in ${UBUNTU_PACKAGES}; do
    if ! apt list --installed 2>/dev/null|grep "^$package" >/dev/null; then
      echo "I might need the sudo password to install '$package' ..."
      sudo apt install -y $package
    fi
  done
fi

# prepare all available modes in a bash-case syntax
MODES_FOR_CASE=$(IFS=$'|'; echo "${WORK_MODES[*]}")
shopt -s extglob
MODES_FOR_CASE="+($MODES_FOR_CASE)"

if [ -z $TAG ]; then
    TAG=$(git rev-parse --abbrev-ref HEAD 2>/dev/null|tr '/' '_')
    if [[ $TAG != *_* ]]; then
        TAG=latest
    fi
fi

if [ $# -ge 1 ]; then
    case $1 in
        "install")
            install_me
            exit 0
        ;;
        --help|help|-h)
            usage
            exit 0
        ;;
        "call")
            if [ $# -eq 1 ]; then
                echo "Please add some commands to 'call' within the container"
                exit 1
            fi
            remaining_args=$(( $# - 1 ))

            call_args="${@:2:$remaining_args}"
            mode=$1
        ;;
        "pull")
            if [ -n "$2" ]; then
                TAG=$2
            fi
	    mode=$1
        ;;
        $MODES_FOR_CASE )
            mode=$1
        ;;
        *)
            echo "Unknown Option '$1'"
            usage
            exit 0
        ;;

    esac

else

    usage

    
    MODES=(${MODES[*]} "tag" "XFSM_VERBOSE" "LANG")

    echo ""
    echo "  -- Commands only for interactive mode"
    echo "      tag          changes docker \"TAG\" to work with (e.g. ubuntu_19.04)"
    echo "                   (only for the current execution of $0)"
    echo "      XFSM_VERBOSE change verbosity of xfce4-session"
    echo "      LANG         change the language for the session (default: $LANG)"
    echo ""

    PS3="Choose option: "
    select mode in ${MODES[@]}; do
        case $mode in
            "install")
                install_me
                exit 0
            ;;
            "call")
                read -p "Command to call in the container: " call_args
                break
            ;;
            "tag")
                read -i $TAG -p "Change tag from \"$TAG\" to: " TAG_NEW

                if [ ${#TAG_NEW} -ge 1 ]; then
                    TAG=$TAG_NEW
                    echo "OK - tag changed to \"$TAG\""
                else
                    echo "OK - tag is still \"$TAG\""
                fi
            ;;
            "XFSM_VERBOSE")
                if [ "x${XFSM_VERBOSE}" != "x1" ]; then
                    echo "Enabled debug output..."
                    export XFSM_VERBOSE=1
                else
                    echo "Disabled debug output..."
                    unset XFSM_VERBOSE
                fi
            ;;
            "LANG")
                # getting all languages with title out of the container
                ALL_LANGS="$(docker run --rm schuellerf/xfce-test:$TAG locale -av |
                   while read LINE; do
                      if [[ $LINE =~ ^locale:.* ]]; then
                        LOC=$(echo "$LINE"|grep -Po "(?<=locale: )[^ ]*");
                      fi;
                      if [[ $LINE =~ title ]]; then
                        T=$(echo "$LINE"|grep -Po "(?<=title \| ).*");
                        echo "$LOC ($T)";
                      fi;
                    done)"

                OLD_IFS=${IFS}
                IFS=$'\n'
                select l in ${ALL_LANGS}; do
                  case $l in
                    *) if [ ${#l} -ge 1 ]; then
                        LANG=$(echo $l|grep -Po "^[^ ]+")
                        echo "OK - language changed to \"$LANG\""
                      else
                        echo "OK - language is still \"$LANG\""
                      fi
                    break
                    ;;
                  esac
                  echo "Choose Language:"
                done
                IFS=${OLD_IFS}

            ;;
            *)
                break
            ;;
        esac
        echo "-- Main Menu --"
    done
fi

if [ ${#mode} -lt 1 ]; then
  echo "Nothing valid selected - exiting"
  exit 1
fi

START_TIME=$(date +%s)

leave() {
    STOP_TIME=$(date +%s)
    echo "Execution took $(( STOP_TIME -START_TIME)) seconds"
    exit $1
}

case $mode in
    "pull")
        docker pull schuellerf/xfce-test:${TAG}
        leave 0
    ;;
    "list")
        tags=$(curl https://registry.hub.docker.com/v1/repositories/schuellerf/xfce-test/tags)
	echo "---"
	echo "All tags available to pull:"
	echo $tags|jq ".[].name"|tr -d '"'
	leave 0
    ;;
    "list_local")
        docker images --format "{{.Tag}}" schuellerf/xfce-test
	exit 0
    ;;
    "build")
        echo "You are building the container: $TAG"
        echo "DOWNLOAD_DATE is set to ${DOWNLOAD_DATE}"
        docker build --build-arg DOWNLOAD_DATE=${DOWNLOAD_DATE} --tag schuellerf/xfce-test:$TAG .
        leave 0
    ;;
esac

echo "You are working with the container: $TAG"

# This starts the container for manual or semi automated tests

get-free-display(){
    declare -a displays
    # find all Xephyr instances and loop through them
    while read line; do
        # this lists the actual command that is running, and replaces
        # the \x00 with a space
        var="$(cat /proc/$line/cmdline | sed -e 's/\x00/ /g'; echo)"
        # loop through the string
        for word in $var; do
            # if it matches a regex, output the number of the display
            if [[ $word =~ ^:[0-9] ]]; then
                displays+=("${word/:/}")
            fi
        done
    done <<< "$(pgrep -f Xephyr)"
    # the initial one
    display=1
    while true; do
        for d in "${displays[@]}"; do
            if [[ "$display" == "$d" ]]; then
                display=$(( $display + 1 ))
            fi
        done
        echo $display
        return 0
    done
}

# resolution of the test X server
# TBD: define what the minimal supported resolution is
export RESOLUTION=1024x768

# use this X display number for the tests
export DISPLAY_NUM=$(get-free-display)

# set SCREENSHOTS to ALWAYS to get screenshots during behave tests
export SCREENSHOTS=${SCREENSHOTS:-NONE}


if [ $mode != "call" ]; then
    Xephyr :${DISPLAY_NUM} -sw-cursor -softCursor -resizeable -ac -screen ${RESOLUTION} &
fi

docker rm "xfce-test-$DISPLAY_NUM" 2>/dev/null
echo ""

#default parameters

COMMAND=""
DETACH="--detach"
DOCKER_MODES=""

if [ $mode == "no-session" ]; then
    COMMAND=/bin/bash
    # don't detach:
    DETACH=""
    DOCKER_MODES="--tty --interactive"
elif [ $mode == "call" ]; then
    COMMAND=$call_args
    DETACH=""
    DOCKER_MODES=""
fi

DOCKER_MODES="${DOCKER_MODES} --volume /etc/timezone:/etc/timezone"
DOCKER_MODES="${DOCKER_MODES} --volume /etc/localtime:/etc/localtime"

if [ -n "$DETACH" ]; then
    echo -n "Starting container: "
fi
docker run --name "xfce-test-$DISPLAY_NUM" $DETACH $DOCKER_MODES \
           --cap-add=SYS_PTRACE \
           --env DISPLAY=":${DISPLAY_NUM}" \
           --env LDTP_DEBUG=2 \
           --env SCREENSHOTS \
           --env RESOLUTION \
           --env XFSM_VERBOSE \
           --env LANG \
           --volume ${PWD}:/data \
           --volume /tmp/.X11-unix:/tmp/.X11-unix:z \
           schuellerf/xfce-test:$TAG $COMMAND

if [ -n "$DETACH" ]; then
    sleep 3 # give ldtp and the session some time
    if [ $mode == "screenshots" ]; then
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" /container_scripts/make_screenshots.py
    elif [ $mode == "behave" ]; then
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" bash -c "cd /behave_tests; GUI_TIMEOUT=120 behave"
    elif [ $mode == "behavevideo" ]; then
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" /container_scripts/run_behave_recorded.sh
    elif [ $mode == "fulltestvideo" ]; then
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" /container_scripts/full_test_video.sh
    else
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" bash -c 'echo "This container includes:";
            cat ~xfce-test_user/version_info.txt;
            echo "You might want to call \"tmux attach\" if you know what tmux ( https://tmux.github.io ) is and need to go to the internals."'
        docker exec --tty --interactive "xfce-test-$DISPLAY_NUM" /bin/bash
    fi
fi

# Copy out the debug file if it exists
docker cp "xfce-test-$DISPLAY_NUM":/home/xfce-test_user/.xfce4-session.verbose-log . 2>/dev/null|| echo ""

# Tear down
if [ $mode != "no-session" ] && [ $mode != "call" ]; then
    docker exec "xfce-test-$DISPLAY_NUM" xfce4-session-logout --logout
fi

echo -n "Stopping: "
docker stop "xfce-test-$DISPLAY_NUM"
echo -n "Removing: "
docker rm "xfce-test-$DISPLAY_NUM"

if [ $mode != "call" ]; then
    # terminate only the current display
    while read line; do
        var="$(cat /proc/$line/cmdline | sed -e 's/\x00/ /g'; echo)"
        for word in $var; do
            if [[ $word =~ ^:[0-9] ]]; then
                if [[ "${word/:/}" == "$DISPLAY_NUM" ]]; then
                    kill "$line"
                fi
            fi
        done
    done <<< "$(pgrep -f Xephyr)"

    rm -rf /tmp/.X11-unix/X${DISPLAY_NUM} /tmp/.X${DISPLAY_NUM}-lock
fi

leave 0


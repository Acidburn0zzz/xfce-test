#!/usr/bin/env bash

install_me() {
  mkdir -p ~/.local/bin
  # "fall back"
  cp $0 ~/.local/bin/xfce-test
  echo "Trying to get the latest version"
  curl -o ~/.local/bin/xfce-test https://raw.githubusercontent.com/schuellerf/xfce-test/master/xfce-test || echo "... well I tried to."
  chmod u+x ~/.local/bin/xfce-test
  echo "Installed 'xfce-test' to $(readlink -f ~/.local/bin/xfce-test)"
  echo "You can just call it with 'xfce-test'"
}

usage() {
    echo "Usage:"
    echo "  $0 [command]"
    echo ""
    echo "  Without a command interactive mode is started"
    echo ""
    echo "  command:"
    echo "      install      Installed the script to ~/.local/bin for"
    echo "                   easier execution"
    echo "      start        Start the container for testing"
    echo "                   USE THIS IF YOU ARE NOT SURE"
    echo "      pull         Get the latest container"
    echo "      no-session   starts the container without a session"
    echo "                   (this is great if you want to test the session itself ;)"
    echo ""
    echo "  -- Commands only working from within the cloned git repository"
    echo "      build        Builds the container locally"
}

MODES=("start" "pull" "no-session" "build")

if [ $# -eq 1 ]; then
    case $1 in
        "install")
            install_me
            exit 0
        ;;
        --help|help|-h)
            usage
            exit 0
        ;;
        #TBD: change to someting like $(IFS=$'|'; echo "${MODES[*]}")
        #     ... but working
        start|pull|no-session|build)
            mode=$1
        ;;
        *)
            echo "Unknown Option '$1'"
            usage
            exit 0
        ;;

    esac

else

    usage

    PS3="Choose option: "
    select mode in install ${MODES[@]}; do
        case $mode in
            "install")
                install_me
                exit 0
            ;;
            *)
                break
            ;;
        esac
    done
fi


case $mode in
    "pull")
        docker pull schuellerf/xfce-test
        exit 0
    ;;
    "build")
        docker build --build-arg DOWNLOAD_DATE=$(date +%Y%m%d) --tag schuellerf/xfce-test:latest .
        exit 0
    ;;
esac

# This starts the container for manual or semi automated tests

# resolution of the test X server
# TBD: define what the minimal supported resolution is
export RESOLUTION=1024x768

# use this X display number for the tests
export DISPLAY_NUM=1

# set SCREENSHOTS to ALWAYS to get screenshots during behave tests
export SCREENSHOTS=NONE

# quit on errors
set +e

# TBD replace by nicer check
if [ -f /etc/lsb-release ] && grep Ubuntu /etc/lsb-release >/dev/null; then
  UBUNTU_PACKAGES="xserver-xephyr docker.io xvfb ffmpeg"

  for package in ${UBUNTU_PACKAGES}; do
    if ! apt list --installed 2>/dev/null|grep "^$package" >/dev/null; then
      sudo apt install -y $package
    fi
  done
fi

# kill an already running instance if still running from the last test
killall -q Xephyr

Xephyr :${DISPLAY_NUM} -ac -screen ${RESOLUTION} &

docker rm xfce-test || echo "^ That's ok, just _tried_ to remove existing container"
echo ""

#default parameters

COMMAND=""
DETACH="--detach"
MODES=""

if [ $mode == "no-session" ]; then
    COMMAND=/bin/bash
    DETACH=""
    MODES="--tty --interactive"
fi

echo -n "Starting container: "
docker run --name xfce-test $DETACH $MODES \
           --env DISPLAY=":${DISPLAY_NUM}" \
           --env LDTP_DEBUG=2 \
           --env SCREENSHOTS=${SCREENSHOTS} \
           --volume ${PWD}:/data \
           --volume /tmp/.X11-unix:/tmp/.X11-unix:z \
           schuellerf/xfce-test:latest $COMMAND

if [ -n $DETACH ]; then
    docker exec --tty --interactive xfce-test /bin/bash
fi

# Tear down
if [ $mode != "no-sessoin" ]; then
    docker exec xfce-test xfce4-session-logout --logout
fi
docker stop xfce-test
docker rm xfce-test
killall -q Xephyr
rm -rf /tmp/.X11-unix/X${DISPLAY_NUM} /tmp/.X${DISPLAY_NUM}-lock


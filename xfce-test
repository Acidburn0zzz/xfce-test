#!/usr/bin/env bash

DOWNLOAD_DATE=${DOWNLOAD_DATE:-$(date +%Y%m%d)}

install_me() {
  mkdir -p ~/.local/bin
  # bash autocomplete
  BASH_COMPLETION="#begin-xfce-test
_xfce-test_completions()
{
  COMPREPLY=(\$(compgen -W \"${WORK_MODES[*]}\" \"\${COMP_WORDS[1]}\"))
}

complete -F _xfce-test_completions xfce-test
#end-xfce-test
"
    if [ ! -f ~/.bash_completion ]; then
        echo "$BASH_COMPLETION" >> ~/.bash_completion
    else
        if grep "#begin-xfce-test" ~/.bash_completion > /dev/null; then
            sed -i "/#begin-xfce-test/,/#end-xfce-test/d" ~/.bash_completion
        fi
        echo "$BASH_COMPLETION" >> ~/.bash_completion
    fi

    # "fall back"
    cp $0 ~/.local/bin/xfce-test
    echo "Trying to get the latest version"
    curl -o ~/.local/bin/xfce-test https://raw.githubusercontent.com/schuellerf/xfce-test/master/xfce-test || echo "... well I tried to."
    chmod u+x ~/.local/bin/xfce-test
    echo "Installed 'xfce-test' to $(readlink -f ~/.local/bin/xfce-test)"
    echo "You can just call it with 'xfce-test'"
}

usage() {
    echo "Usage:"
    echo "  $0 [command]"
    echo ""
    echo "  Without a command, interactive mode is started"
    echo ""
    echo "  command:"
    echo "      start        Start the container for testing"
    echo "                   USE THIS IF YOU ARE NOT SURE"
    echo "      pull         Get the latest container"
    echo "      no-session   starts the container without a session"
    echo "                   (this is great if you want to test the session itself ;)"
    echo "      install      Installed the script to ~/.local/bin for"
    echo "                   easier execution"
    echo ""
    echo "  -- Commands doing some automatic stuff"
    echo "     screenshots   Creating just a screenshot of each 'main' xfce app"
    echo "     behave        Run all behave tests"
    echo "     behavevideo   Run all behave tests while recording them"
    echo "     fulltestvideo Create a demo video - this is the one done by travis"
    echo ""
    echo "  -- Commands only working from within the cloned git repository"
    echo "      build        Builds the container locally"
    echo "                   Environment variable:"
    echo "                   DOWNLOAD_DATE defines if all source code should be"
    echo "                                 newly cloned and rebuilt"
    echo "                   default: ${DOWNLOAD_DATE}"
}

MANUAL_MODES=("start" "pull" "no-session")
AUTOMATIC_MODES=("screenshots" "behave" "behavevideo" "fulltestvideo")

REPO_MODES=("build")
WORK_MODES=(${MANUAL_MODES[*]} ${AUTOMATIC_MODES[*]})
if git status > /dev/null; then
    WORK_MODES+=(${REPO_MODES[*]})
fi

MODES=("install" ${WORK_MODES[*]})


# prepare all available modes in a bash-case syntax
MODES_FOR_CASE=$(IFS=$'|'; echo "${WORK_MODES[*]}")
shopt -s extglob
MODES_FOR_CASE="+($MODES_FOR_CASE)"

if [ -z $TAG ]; then
    TAG=$(git rev-parse --abbrev-ref HEAD 2>/dev/null|tr '/' '_')
    if [[ $TAG != *_* ]]; then
        TAG=latest
    fi
fi

if [ $# -eq 1 ]; then
    case $1 in
        "install")
            install_me
            exit 0
        ;;
        --help|help|-h)
            usage
            exit 0
        ;;
        $MODES_FOR_CASE )
            mode=$1
        ;;
        *)
            echo "Unknown Option '$1'"
            usage
            exit 0
        ;;

    esac

else

    usage

    
    MODES=(${MODES[*]} "tag")

    echo ""
    echo "  -- Commands only for interactive mode"
    echo "      tag          changes docker \"TAG\" to work with (e.g. ubuntu_19.04)"
    echo "                   (only for the current execution of $0)"
    echo ""

    PS3="Choose option: "
    select mode in ${MODES[@]}; do
        case $mode in
            "install")
                install_me
                exit 0
            ;;
            "tag")
                read -i $TAG -p "Change tag from \"$TAG\" to: " TAG_NEW

                if [ ${#TAG_NEW} -ge 1 ]; then
                    TAG=$TAG_NEW
                    echo "OK - tag changed to \"$TAG\""
                else
                    echo "OK - tag is still \"$TAG\""
                fi
            ;;
            *)
                break
            ;;
        esac
    done
fi

echo "You are working with the container: $TAG"

case $mode in
    "pull")
        docker pull schuellerf/xfce-test:${TAG}
        exit 0
    ;;
    "build")
        echo "DOWNLOAD_DATE is set to ${DOWNLOAD_DATE}"
        docker build --build-arg DOWNLOAD_DATE=${DOWNLOAD_DATE} --tag schuellerf/xfce-test:$TAG .
        exit 0
    ;;
esac

# This starts the container for manual or semi automated tests

# resolution of the test X server
# TBD: define what the minimal supported resolution is
export RESOLUTION=1024x768

# use this X display number for the tests
export DISPLAY_NUM=1

# set SCREENSHOTS to ALWAYS to get screenshots during behave tests
export SCREENSHOTS=${SCREENSHOTS:-NONE}

# quit on errors
set +e

# TBD replace by nicer check
if [ -f /etc/lsb-release ] && grep Ubuntu /etc/lsb-release >/dev/null; then
  UBUNTU_PACKAGES="xserver-xephyr docker.io xvfb ffmpeg"

  for package in ${UBUNTU_PACKAGES}; do
    if ! apt list --installed 2>/dev/null|grep "^$package" >/dev/null; then
      sudo apt install -y $package
    fi
  done
fi

# kill an already running instance if still running from the last test
killall -q Xephyr

Xephyr :${DISPLAY_NUM} -ac -screen ${RESOLUTION} &

docker rm xfce-test || echo "^ That's ok, just _tried_ to remove existing container"
echo ""

#default parameters

COMMAND=""
DETACH="--detach"
DOCKER_MODES=""

if [ $mode == "no-session" ]; then
    COMMAND=/bin/bash
    # don't detach:
    DETACH=""
    DOCKER_MODES="--tty --interactive"
fi

echo -n "Starting container: "
docker run --tty --interactive --name xfce-test $DETACH $DOCKER_MODES \
           --env DISPLAY=":${DISPLAY_NUM}" \
           --env LDTP_DEBUG=2 \
           --env SCREENSHOTS \
           --env RESOLUTION \
           --volume ${PWD}:/data \
           --volume /tmp/.X11-unix:/tmp/.X11-unix:z \
           schuellerf/xfce-test:$TAG $COMMAND

if [ -n $DETACH ]; then
    sleep 3 # give ldtp and the session some time
    if [ $mode == "screenshots" ]; then
        docker exec --tty --interactive xfce-test /container_scripts/make_screenshots.py
    elif [ $mode == "behave" ]; then
        docker exec --tty --interactive xfce-test bash -c "cd /behave_tests; GUI_TIMEOUT=120 behave"
    elif [ $mode == "behavevideo" ]; then
        docker exec --tty --interactive xfce-test /container_scripts/run_behave_recorded.sh
    elif [ $mode == "fulltestvideo" ]; then
        docker exec --tty --interactive xfce-test /container_scripts/full_test_video.sh
    else
        docker exec --tty --interactive xfce-test bash -c 'echo -n "This container includes:\n";
            cat ~xfce-test_user/version_info.txt;
            echo "You might want to call \"tmux attach\" if you know what tmux ( https://tmux.github.io ) is and need to go to the internals."'
        docker exec --tty --interactive xfce-test /bin/bash
    fi
fi

# Tear down
if [ $mode != "no-session" ]; then
    docker exec xfce-test xfce4-session-logout --logout
fi
docker stop xfce-test
docker rm xfce-test
killall -q Xephyr
rm -rf /tmp/.X11-unix/X${DISPLAY_NUM} /tmp/.X${DISPLAY_NUM}-lock

